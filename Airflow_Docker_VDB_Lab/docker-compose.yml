## Docker Compose for Airflow with Qdrant and Postgres.
## ro tag helps the caching issue: docker caches older version and doesn't rebuild properly.
## fernet key helps, can see logs in webserver. # MLQ74sMM9tU3ZMJ3H-_LES7TwvwRpfkr1W0YMFu7jZg=
## this is 8th attempt at rebuild: concept, prevent 3x10GB images, multiple images, make 1 base image

## critical rule: Only ONE service should have build: (the airflow-image service)
## All runtime services use image: only.
## earlier pattern had build: . in the x-airflow-common anchor block -- problem.
## =============================================================================================================================


# Docker Compose for Airflow with Qdrant - Fixed Version
# No over-engineering, just solving the build issue

x-airflow-common: &airflow-common
  # REMOVED build: . from here - this was causing triple builds
  image: airflow-rag-custom:latest  # All services use the built image
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: 'MLQ74sMM9tU3ZMJ3H-_LES7TwvwRpfkr1W0YMFu7jZg='
    AIRFLOW__WEBSERVER__SECRET_KEY: 'MLQ74sMM9tU3ZMJ3H-_LES7TwvwRpfkr1W0YMFu7jZg='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    QDRANT_HOST: qdrant
    QDRANT_PORT: 6333
  volumes:
    - ./dags:/opt/airflow/dags:ro
    - ./plugins:/opt/airflow/plugins:ro
    - ./data:/opt/airflow/data
  depends_on:
    postgres:
      condition: service_healthy

services:
  # BUILD SERVICE - is the fix
  # Instead of profiles, use a different approach
  airflow-build:
    build:
      context: .
      dockerfile: Dockerfile
    image: airflow-rag-custom:latest
    # This service only exists to build, never runs
    entrypoint: ["echo", "Build complete"]
    deploy:
      replicas: 0  # Never actually deploy this service
    
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_storage:/qdrant/storage

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com || true
        exit 0

volumes:
  postgres_data: